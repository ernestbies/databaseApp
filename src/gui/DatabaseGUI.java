/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import databaseapp.Connect;
import databaseapp.DatabaseData;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ernest Bieś, PWSZ Tarnów 2019
 */
public class DatabaseGUI extends javax.swing.JFrame {

    private Connect con;
    private boolean isConnect;
    private DatabaseData dbData;
    private List<String> emailList;

    public DatabaseGUI() {
        initComponents();
        con = null;
        dbData = null;
        isConnect = false;
        emailList = new ArrayList<>();
        jButtonEmail.setEnabled(false);
        jButtonSaveFile.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldHost = new javax.swing.JTextField();
        jTextFieldDbname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jButtonConnect = new javax.swing.JButton();
        jPasswordFieldPass = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jButtonLoadFile = new javax.swing.JButton();
        jButtonEmail = new javax.swing.JButton();
        jButtonSaveFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Database Connection Application 1.0 @ Ernest Bieś");

        jLabel2.setText("Host:");

        jLabel3.setText("DBName:");

        jLabel4.setText("Password:");

        jTextFieldHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHostActionPerformed(evt);
            }
        });

        jTextFieldDbname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDbnameActionPerformed(evt);
            }
        });

        jLabel5.setText("Port:");

        jTextFieldPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPortActionPerformed(evt);
            }
        });

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jPasswordFieldPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldPassActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Select table:");

        jLabel7.setText("Username:");

        jTextFieldUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUsernameActionPerformed(evt);
            }
        });

        jButtonLoadFile.setText("Load file");
        jButtonLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadFileActionPerformed(evt);
            }
        });

        jButtonEmail.setText("Send e-mail");
        jButtonEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmailActionPerformed(evt);
            }
        });

        jButtonSaveFile.setText("Save file");
        jButtonSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldDbname, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addGap(2, 2, 2)
                                .addComponent(jTextFieldHost, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSaveFile)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonLoadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPasswordFieldPass, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jButtonEmail))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDbname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jPasswordFieldPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jButtonConnect)
                    .addComponent(jButtonLoadFile)
                    .addComponent(jButtonSaveFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEmail)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldHostActionPerformed

    private void jTextFieldDbnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDbnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDbnameActionPerformed

    private void jTextFieldPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPortActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        if (jTextFieldDbname.getText().isEmpty() || jTextFieldHost.getText().isEmpty() || jTextFieldPort.getText().isEmpty() || jTextFieldUsername.getText().isEmpty() || jPasswordFieldPass.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Fill in all fields.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        ResultSet rs = null;
        Statement st = null;

        if (!isConnect) {
            try {
                String sql = "SELECT table_schema, table_name FROM information_schema.tables WHERE table_schema != 'pg_catalog' AND table_schema != 'information_schema' ORDER BY table_schema, table_name";
                dbData = new DatabaseData(jTextFieldDbname.getText(), jTextFieldHost.getText(), jTextFieldPort.getText(), jTextFieldUsername.getText(), String.valueOf(jPasswordFieldPass.getPassword()));
                con = new Connect(dbData);
                st = con.getConnection().createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                rs = st.executeQuery(sql);

                while (rs.next()) {
                    jComboBox1.addItem(rs.getString("table_schema") + "." + rs.getString("table_name"));
                }

                jButtonConnect.setText("Disconnect");
                isConnect = true;
                jTextFieldDbname.setEditable(false);
                jTextFieldHost.setEditable(false);
                jTextFieldPort.setEditable(false);
                jTextFieldUsername.setEditable(false);
                jPasswordFieldPass.setEditable(false);
                jButtonEmail.setEnabled(true);
                jButtonSaveFile.setEnabled(true);
                jButtonLoadFile.setEnabled(false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "SQL Error. Couldn't connect to database!", "Warning", JOptionPane.WARNING_MESSAGE);
                System.err.println("SQL Error. " + ex);
            } catch (NullPointerException npe) {
                JOptionPane.showMessageDialog(null, "Error. Couldn't connect to database!", "Warning", JOptionPane.WARNING_MESSAGE);
                System.err.println("Error. " + npe);
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (st != null) {
                        st.close();
                    }
                } catch (SQLException sqle) {
                    System.err.println("Error while closing ResultSet & Statement. SQLException. " + sqle);
                }
            }
        } else {
            con.close();
            jButtonConnect.setText("Connect");
            isConnect = false;
            jComboBox1.setModel(new DefaultComboBoxModel());
            jTable1.setModel(new DefaultTableModel());
            jTextFieldDbname.setEditable(true);
            jTextFieldHost.setEditable(true);
            jTextFieldPort.setEditable(true);
            jTextFieldUsername.setEditable(true);
            jPasswordFieldPass.setEditable(true);
            jButtonEmail.setEnabled(false);
            jButtonSaveFile.setEnabled(false); 
            jButtonLoadFile.setEnabled(true);
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String tableName = jComboBox1.getSelectedItem().toString();
        queryTable(tableName);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jPasswordFieldPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordFieldPassActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jTextFieldUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldUsernameActionPerformed

    private void jButtonLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadFileActionPerformed
        dbData = loadFile("databaseinformation.ser");
        if (dbData != null) {
            jTextFieldDbname.setText(dbData.getDbname());
            jTextFieldHost.setText(dbData.getHost());
            jTextFieldPort.setText(dbData.getPort());
            jTextFieldUsername.setText(dbData.getUser());
            jPasswordFieldPass.setText(dbData.getPass());
            JOptionPane.showMessageDialog(null, "Database information loaded from file.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonLoadFileActionPerformed

    private void jButtonEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmailActionPerformed
        if ("roznosci.odbiorcy".equals(jComboBox1.getSelectedItem().toString())) {
            List<String> validEmails = new ArrayList<>();
            for (String s : emailList) {
                if (checkEmail(s)) {
                    validEmails.add(s);
                }
            }
            EmailGUI emailGUI = new EmailGUI(validEmails);
            emailGUI.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            emailGUI.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "You need to select table 'roznosci.odbiorcy' to send an email.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEmailActionPerformed

    private void jButtonSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveFileActionPerformed
        saveFile("databaseinformation.ser");
        JOptionPane.showMessageDialog(null, "Database information saved in file.", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonSaveFileActionPerformed

    //Metoda wysyłająca zapytanie oraz pobierająca informacje o tabeli (nazwa, typ, wartości rekordów)
    private void queryTable(String tableName) {
        if ("roznosci.odbiorcy".equals(tableName)) {
            emailList.clear();
        }

        ResultSet rs = null;
        Statement st = null;

        try {
            String sql = "SELECT * FROM " + tableName;
            st = con.getConnection().createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql);

            ResultSetMetaData meta = rs.getMetaData();
            int numberColumns = meta.getColumnCount();

            DefaultTableModel dtm = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            List<String> columnNames = new ArrayList<>();
            for (int i = 1; i <= numberColumns; i++) {
                String key = meta.getColumnName(i);
                columnNames.add(key);
                String columnType = meta.getColumnTypeName(i);
                dtm.addColumn(key + " (" + columnType + ")");
            }
            
            Vector<String> vector = new Vector<>(columnNames);
            while (rs.next()) {
                Object[] row = new Object[numberColumns];
                for (int i = 1; i <= numberColumns; i++) {
                    Object value;
                    try{
                        value = rs.getObject(i);
                    }catch(SQLException e){
                        //W przypadku wyjątku - nieznany typ obiektu
                        //przypadek: typ monetarny (money)
                        value = rs.getString(i);
                    }
                    row[i - 1] = value;
                }
                dtm.addRow(row);

                if ("roznosci.odbiorcy".equals(tableName) && rs.getBoolean(5) == true) {
                    emailList.add(rs.getString(4));
                }
            }
            
            if (tableName.equals("roznosci.odbiorcy")) {
                DefaultTableModel model = new DefaultTableModel(dtm.getDataVector(), vector) {
                    public Class<?> getColumnClass(int column) {
                        switch (column) {
                            case 0:
                                return String.class;
                            case 1:
                                return String.class;
                            case 2:
                                return String.class;
                            case 3:
                                return String.class;
                            case 4:
                                return Boolean.class;
                            default:
                                return String.class;
                        }
                    }
                    
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                jTable1.setModel(model);
            } else {
                jTable1.setModel(dtm);
            }
       
        } catch (SQLException ex) {
            System.err.println("SQL Error. " + ex);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (st != null) {
                    st.close();
                }
            } catch (SQLException sqle) {
                System.err.println("Error while closing ResultSet & Statement. SQLException. " + sqle);
            }
        }
    }

    //Metoda do odczytu danych konfiguracyjnych bazy danych zapisanych w pliku
    public DatabaseData loadFile(String fileName) {
        try (ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(new FileInputStream(fileName)))) {
            dbData = (DatabaseData) in.readObject();
            return dbData;
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Couldn't load file. FileNotFoundException!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Couldn't load file. IOException!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Couldn't load file. ClassNotFoundException!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }

    //Metoda do zapisu danych konfiguracyjnych bazy danych w pliku
    public void saveFile(String fileName){
        try (ObjectOutputStream out = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)))) {
            out.writeObject(dbData);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Couldn't save file. FileNotFoundException!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Couldn't save file. IOException!", "Error", JOptionPane.ERROR_MESSAGE);
        }       
    }
    
    //Metoda sprawdzająca poprawność adresu e-mail za pomocą wyrażenia regularnego
    private boolean checkEmail(String email) {
        Pattern regex = Pattern.compile("(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])");
        return regex.matcher(email).matches();
    }

    //Zmiana wyglądu GUI na typ "Windows"
    public void changeView() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonEmail;
    private javax.swing.JButton jButtonLoadFile;
    private javax.swing.JButton jButtonSaveFile;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPasswordField jPasswordFieldPass;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldDbname;
    private javax.swing.JTextField jTextFieldHost;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
}
